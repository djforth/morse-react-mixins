{"version":3,"sources":["../src/widths_mixins.js"],"names":["getValue","v","replace","getTrueWidth","e","elm","window","getComputedStyle","n","attrs","getPropertyValue","attr","addElement","w","elmSizes","isEqualNode","width","push","elements","convertRefs","refs","convertDomlist","list","Array","prototype","slice","call","convertReactComps","r","findDOMNode","getAllWidths","getWidths","items","length","p","c"],"mappings":"+6BAmBA,QAASA,SAAT,CAAkBC,CAAlB,CAAqB,CACnB,OAAcA,EAAEC,OAAF,CAAU,UAAV,CAAsB,EAAtB,CACf,CAED,QAASC,aAAT,CAAsBC,CAAtB,CAAyB,CACvB,GAAIC,KAAMC,OAAOC,gBAAP,CAAwBH,CAAxB,CAA2B,IAA3B,CAAV,CACII,EAAI,CADR,CASA,MAPA,sBAAUC,KAAV,CAAiB,cAAQ,CACvB,GAAIR,GAAID,SAASK,IAAIK,gBAAJ,CAAqBC,IAArB,CAAT,CAAR,CACAH,GAAKP,CACN,CAHD,CAOA,CAFAW,WAAWR,CAAX,CAAcI,CAAd,CAEA,CAAOA,CACR,CAED,QAASI,WAAT,CAAoBP,GAApB,CAAyBQ,CAAzB,CAA4B,CACtB,uBAAS,kBAAMC,QAAN,CAAgB,kBAAKV,GAAEC,GAAP,CAAhB,CAAT,CAAsCA,GAAtC,CADsB,CAExBS,SAAW,kBAAMA,QAAN,CAAgB,WAAK,CAE9B,MADIV,GAAEC,GAAF,CAAMU,WAAN,CAAkBV,GAAlB,CACJ,GAD4BD,EAAEY,KAAF,CAAUH,CACtC,EAAOT,CACR,CAHU,CAFa,CAOxBU,SAASG,IAAT,CAAc,CAAEZ,IAAKA,GAAP,CAAYW,MAAOH,CAAnB,CAAd,CAEH,C,mcAvCGJ,oH,CAUAS,W,CACAJ,W,iBA8BW,CACbX,aAAcA,YADD,CAGbgB,YAAa,0BAAQ,CACnBD,SAAW,qBAASE,IAAT,CAEZ,CANY,CAQbC,eAAgB,wBAASC,IAAT,CAAe,CAE7B,MADAJ,UAAWK,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,IAA3B,CACX,CAAO,IACR,CAXY,CAabK,kBAAmB,2BAASP,IAAT,CAAe,CAChCF,SAAW,kBAAM,qBAASE,IAAT,CAAN,CAAsB,WAAK,OAChC,wBAAYQ,CAAZ,CADgC,CACTA,CADS,CAE7B,mBAASC,WAAT,CAAqBD,CAArB,CACR,CAHU,CAIZ,CAlBY,CAoBbE,aAAc,uBAAW,CACvB,MAAOhB,SACR,CAtBY,CAwBbiB,UAAW,mBAAST,IAAT,CAAe,CACxB,GAAIU,MAAJ,CACIhB,KADJ,CADwB,OAGxBgB,MAAQ,sBAAUV,IAAV,EAAkBA,IAAlB,CAAyBJ,QAHT,CAIH,CAAjB,SAAMe,MAJc,EAIO,CAJP,EAMxBjB,MAAQ,qBACNgB,KADM,CAEN,SAASE,CAAT,CAAYC,CAAZ,CAAe,CACb,GAAI3B,GAAI,uBAAW0B,CAAX,EAAgBA,CAAhB,CAAoB/B,aAAa+B,CAAb,CAA5B,CAEA,MADA1B,IAAKL,aAAagC,CAAb,CACL,CAAO3B,CACR,CANK,CAON,CAPM,CANgB,CAgBjBQ,KAhBiB,CAiBzB,CAzCY,C","file":"widths_mixins.js","sourcesContent":["// Libraries\n// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport includes from 'lodash/includes';\n\nlet attrs = [\n  'padding-left',\n  'padding-right',\n  'margin-left',\n  'margin-right',\n  'border-left-width',\n  'border-right-width',\n  'width',\n];\n\nlet elements = [];\nlet elmSizes = [];\n\nfunction getValue(v) {\n  return Number(v.replace(/[a-z]|%/g, ''));\n}\n\nfunction getTrueWidth(e) {\n  let elm = window.getComputedStyle(e, null);\n  let n = 0;\n  _.forEach(attrs, attr => {\n    let v = getValue(elm.getPropertyValue(attr));\n    n += v;\n  });\n\n  addElement(e, n);\n\n  return n;\n}\n\nfunction addElement(elm, w) {\n  if (includes(_.map(elmSizes, e => e.elm), elm)) {\n    elmSizes = _.map(elmSizes, e => {\n      if (e.elm.isEqualNode(elm)) e.width = w;\n      return e;\n    });\n  } else {\n    elmSizes.push({ elm: elm, width: w });\n  }\n}\n/* eslint-disable no-invalid-this */\nexport default {\n  getTrueWidth: getTrueWidth,\n\n  convertRefs: refs => {\n    elements = _.values(refs);\n    return this;\n  },\n\n  convertDomlist: function(list) {\n    elements = Array.prototype.slice.call(list);\n    return this;\n  },\n\n  convertReactComps: function(refs) {\n    elements = _.map(_.values(refs), r => {\n      if (_.isElement(r)) return r;\n      return ReactDOM.findDOMNode(r);\n    });\n  },\n\n  getAllWidths: function() {\n    return elmSizes;\n  },\n\n  getWidths: function(list) {\n    let items;\n    let width;\n    items = _.isArray(list) ? list : elements;\n    if (items.length === 0) return 0;\n\n    width = _.reduce(\n      items,\n      function(p, c) {\n        let n = _.isNumber(p) ? p : getTrueWidth(p);\n        n += getTrueWidth(c);\n        return n;\n      },\n      0\n    );\n\n    return width;\n  },\n};\n/* eslint-enable no-invalid-this */\n"]}